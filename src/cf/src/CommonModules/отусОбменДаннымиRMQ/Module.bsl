#Область СлужебныйПрограммныйИнтерфейс

// Обработчик подписки ЗаписьСправочника
Процедура ЗаписьСправочникаПриЗаписи(Источник, Отказ) Экспорт

	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;    
			
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON, Источник, НазначениеТипаXML.Явное);
	
	ТекстСообщения = ЗаписьJSON.Закрыть();  
	
	// Поместим с очередь исходящих сообщений
	ИсходящееСообщение = Справочники.отусИсходящиеСообщенияRMQ.СоздатьЭлемент();
	ИсходящееСообщение.ТекстСообщения = ТекстСообщения;   
	ИсходящееСообщение.КлючМаршрутизации = "";
	ИсходящееСообщение.ДатаПомещения = ТекущаяДата();
		
	ИсходящееСообщение.Записать();
		
КонецПроцедуры   

// Обработчик подписки ЗаписьДокумента
Процедура ЗаписьДокументаПриЗаписи(Источник, Отказ) Экспорт

	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;    
			
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON, Источник, НазначениеТипаXML.Явное);
	
	ТекстСообщения = ЗаписьJSON.Закрыть();  
	
	// Поместим с очередь исходящих сообщений
	ИсходящееСообщение = Справочники.отусИсходящиеСообщенияRMQ.СоздатьЭлемент();
	ИсходящееСообщение.ТекстСообщения = ТекстСообщения;   
	ИсходящееСообщение.КлючМаршрутизации = "";
	ИсходящееСообщение.ДатаПомещения = ТекущаяДата();
		
	ИсходящееСообщение.Записать();
		
КонецПроцедуры

// Обработка регламентного задания отправки сообщений в RMQ
Процедура ОтправкаСообщенийОчереди() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсходящиеСообщенияRMQ.Ссылка КАК Ссылка,
	|	ИсходящиеСообщенияRMQ.ТекстСообщения КАК ТекстСообщения,
	|	ИсходящиеСообщенияRMQ.КлючМаршрутизации КАК КлючМаршрутизации
	|ИЗ
	|	Справочник.отусИсходящиеСообщенияRMQ КАК ИсходящиеСообщенияRMQ
	|ГДЕ
	|	НЕ ИсходящиеСообщенияRMQ.ПометкаУдаления
	|	И НЕ ИсходящиеСообщенияRMQ.Отправлено
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИсходящиеСообщенияRMQ.ДатаПомещения";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ОбщегоНазначения.СообщитьПользователю("Очередь для отправки пустая");
        Возврат;
	КонецЕсли;	
	
	// Подключение компоненты PinkRabbitMQ
	Если НЕ ПодключитьКомпоненту() Тогда
		ВызватьИсключение("Ошибка подключения компоненты PinkRabbitMQ");
	КонецЕсли;
		
	// Инициализация компоненты PinkRabbitMQ
	КомпонентаRMQ = Неопределено;
	Если НЕ ИнициализироватьКомпоненту(КомпонентаRMQ) Тогда
		ВызватьИсключение("Ошибка инициализации компоненты PinkRabbitMQ"); 
	КонецЕсли;	
	
	Выборка = РезультатЗапроса.Выбрать();
		
	Пока Выборка.Следующий() Цикл
	
		// отправка сообщения
		Если НЕ ОтправитьСообщениеRMQ(КомпонентаRMQ, Выборка.ТекстСообщения, Выборка.КлючМаршрутизации) Тогда 
			Продолжить;
		КонецЕсли;	
		
		// отметка отправки
		ИсходящееСообщение = Выборка.Ссылка.ПолучитьОбъект();
		ИсходящееСообщение.ДатаОтправки = ТекущаяДата();
		ИсходящееСообщение.Отправлено = Истина;
		ИсходящееСообщение.Записать();
	
	КонецЦикла;	 	
	
	ОбщегоНазначения.СообщитьПользователю("Сообщения успешно отправлены!");
		
КонецПроцедуры   

Процедура ЧтениеСообщений() Экспорт
	
	ТекстСообщения = "";
	Результат = ПрочитатьСообщениеRMQ(ТекстСообщения);
	
	Если Результат И ЗначениеЗаполнено(ТекстСообщения) тогда 
		
		ЧтениеJSON = Новый ЧтениеJSON; 
		ЧтениеJSON.УстановитьСтроку(ТекстСообщения);
		//ДокументЗаказ = СериализаторXDTO.ПрочитатьJSON(ЧтениеJSON, Тип("ДокументОбъект.ЗаказКлиента"));
		ОбъектКонфигурации = СериализаторXDTO.ПрочитатьJSON(ЧтениеJSON);
		ОбъектКонфигурации.ОбменДанными.Загрузка = Истина;
		ОбъектКонфигурации.Записать();
	КонецЕсли;	
	
КонецПроцедуры	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПодключитьКомпоненту()
	
	Попытка
		КомпонентаПодключена = ПодключитьВнешнююКомпоненту("ОбщийМакет.отусPinkRabbitMQ", "BITERP", ТипВнешнейКомпоненты.Native);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ИнициализироватьКомпоненту(Компонента)
	
	Попытка
		Компонента  = Новый("AddIn.BITERP.PinkRabbitMQ");
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ОтправитьСообщениеRMQ(Компонента, ТекстСообщения, КлючМаршрутизации)
	
	Попытка
		Компонента.Connect(
			"localhost",
			5672,
			"guest",
			"guest",
			"OTUS_exam");
		
		ТочкаОбмена = "OTUS";
					
		Компонента.BasicPublish(
			ТочкаОбмена,
			КлючМаршрутизации,
			ТекстСообщения,
			1,
			Ложь);
	Исключение
		СистемнаяОшибка = ОписаниеОшибки();
		ТекстОшибки = "Ошибка отправки сообщения!%СистемнаяОшибка%";
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СистемнаяОшибка%", СистемнаяОшибка);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ПрочитатьСообщениеRMQ(ПрочитанноеСообщение)
	
	ПрочитанноеСообщение = "";
	
	// Подключение компоненты PinkRabbitMQ
	Если НЕ ПодключитьКомпоненту() Тогда
		ВызватьИсключение("Ошибка подключения компоненты PinkRabbitMQ");
	КонецЕсли;
		
	// Инициализация компоненты PinkRabbitMQ
	КомпонентаRMQ = Неопределено;
	Если НЕ ИнициализироватьКомпоненту(КомпонентаRMQ) Тогда
		ВызватьИсключение("Ошибка инициализации компоненты PinkRabbitMQ"); 
	КонецЕсли;  
	
	Попытка
		КомпонентаRMQ.Connect(
			"localhost",
			5672,
			"guest",
			"guest",
			"OTUS_exam");
		
		ИмяОчереди = Константы.отусИмяОчередиЧтенияRMQ.Получить();
		
		Попытка
			
			Потребитель = КомпонентаRMQ.BasicConsume(ИмяОчереди, "", Истина, Ложь, 0);
			
			ОтветноеСообщение = "";
			Если КомпонентаRMQ.BasicConsumeMessage("", ОтветноеСообщение, 5) Тогда
				КомпонентаRMQ.BasicAck();
				//Форма.ОтветноеСообщение = ОтветноеСообщение;
				ТекстСообщения = НСтр("ru='Сообщение успешно прочитано!'");
			Иначе
				//Форма.ОтветноеСообщение = ОтветноеСообщение;
				ТекстСообщения = НСтр("ru='Очередь пустая!'");
			КонецЕсли;
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			
			КомпонентаRMQ.BasicCancel("");
			
			ПрочитанноеСообщение = ОтветноеСообщение;
			Возврат Истина;
		Исключение
			ВызватьИсключение КомпонентаRMQ.GetLastError();
		КонецПопытки;
	Исключение
		СистемнаяОшибка = ОписаниеОшибки();
		ТекстСообщения = "Ошибка чтения сообщения!%СистемнаяОшибка%";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СистемнаяОшибка%", СистемнаяОшибка);
		ВызватьИсключение ТекстСообщения;
	КонецПопытки;
	
	Возврат Ложь;	
	
КонецФункции

#КонецОбласти